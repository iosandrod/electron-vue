<template>
  <a-select
    v-model:value="value"
    show-search
    placeholder="Select a person"
    style="width: 200px"
    :options="options"
    :filter-option="filterOption"
    @focus="handleFocus"
    @blur="handleBlur"
    @change="handleChange"
  ></a-select>
</template>
<script lang="ts" setup>
import type { SelectProps } from 'ant-design-vue';
import { ref } from 'vue';
const options = ref<SelectProps['options']>([
  { value: 'jack', label: 'Jack' },
  { value: 'lucy', label: 'Lucy' },
  { value: 'tom', label: 'Tom' },
]);
const handleChange = (value: string) => {
  console.log(`selected ${value}`);
};
const handleBlur = () => {
  console.log('blur');
};
const handleFocus = () => {
  console.log('focus');
};
const filterOption = (input: string, option: any) => {
  return option.value.toLowerCase().indexOf(input.toLowerCase()) >= 0;
};

const value = ref<string | undefined>(undefined);
</script>




const oArr = [
  {
    value: 1,
  },
  {
    value: 2,
  },
  {
    value: 3,
  },
  {
    value: 4,
  },
  {
    value: 5,
  },
  {
    value: 6,
  },
  {
    value: 7,
  },
  {
    value: 8,
  },
  {
    value: 9,
  },
  {
    value: 10,
  },
]
const testArr = ref(oArr)
const _arr = toRaw(testArr.value)
const _arr1 = toRaw(testArr.value)


function testClick(params: any) {
  electron.ipcRenderer.send('message-to-main', _arr1)
}
electron.ipcRenderer.on('main-to-message', (event, value) => {
  console.log(JSON.stringify(_arr1) == JSON.stringify(value))
})

watchEffect(() => {
  console.log(JSON.stringify(formData))
})

const submitEvent = () => {
  VXETable.modal.message({ content: '保存成功', status: 'success' })
}
const resetEvent = () => {
  VXETable.modal.message({ content: '重置事件', status: 'info' })
}



// const _item = formItems.value.reduce((res, item) => {
//   const children = item.children

// }, [])

@submit="submitEvent"
      @reset="resetEvent"















      const outSizeDivFn = getOutSizeDiv(formitem)
    const itemConfig = formitem.itemConfig
    const field = formitem.itemConfig.field!
    const _data = data || {}
    const diretive: Directive = {
        mounted(div, vnode) {
            const instance = vnode.instance
            const $refs = instance?.$refs!
            const vxeinput = $refs['vxeinput'] as VxeInputInstance
            formitem.pageRef['edititem'] = vxeinput
            formitem.editMethod.focus = () => {
                formitem.itemConfig.isFocus = true
                vxeinput.focus()//使其活得焦点
            }
        },
        unmounted() {
            formitem.pageRef['edititem'] = null
        }
    }
    const showValue = computed(() => {
        return 'showValue'
    })
    const value = computed({
        get() {
            const isFocus = itemConfig.isFocus
            if (isFocus == true) {
                return _data[field]
            }
            return showValue.value
        },
        set(value) {
            _data[field] = value
        }
    }) as any
    const suffStyle = styleBuilder.setMousePoint().getStyle()
    let isClick = false
    let isMousedown = false
    const suffixIcon = getIcon({
        style: suffStyle,
        onClick: (event) => {
            isClick = true
            setTimeout(() => {
                isClick = false
            }, 0);
            event.stopPropagation()
        },
        onMousedown: (event: MouseEvent) => {
            isMousedown = true
            setTimeout(() => {
                formitem.focus()
                isMousedown = false
            }, 0);
            event.stopPropagation()
        }
    }, 'vxe-icon-search')()
    // formitem.effectPool['polldownEffect'] = watchEffect(() => {
    //     const polldown = formitem.pageRef['polldown'] as VxePulldownInstance
    //     if (polldown == null) {
    //         return
    //     }
    //     if (formitem.itemConfig.isFocus == true) {
    //         polldown.showPanel()
    //     } else {
    //         polldown.hidePanel()
    //     }
    // })
    // watch(() => formitem.itemConfig.isFocus, (newValue) => {
    //     console.log(newValue)
    // })
    const inputCom = withDirectives(h(VxeInput,
        {
            modelValue: value.value, onChange: ({ value: value1 }: any) => {
                value.value = value1
            },
            placeholder: '',
            onFocus: () => {
                itemConfig.isFocus = true
            },
            ref: 'vxeinput',
            onBlur: () => {
                if (isClick == false && isMousedown == false) {
                    itemConfig.isFocus = false
                }
            }
        }, {
        suffix: () => {
            return suffixIcon
        }
    })
        , [[diretive]])
    const tableConfig = reactive({
        showCheckBoxColumn: false,
        data: [{ id: 10001, name: 'Test1', nickname: 'T1', role: 'Develop', sex: 'Man', age: 28, address: 'Shenzhen' },
        { id: 10002, name: 'Test2', nickname: 'T2', role: 'Test', sex: 'Women', age: 22, address: 'Guangzhou' },
        { id: 10003, name: 'Test3', nickname: 'T3', role: 'PM', sex: 'Man', age: 32, address: 'Shanghai' },
        ], columns: [
            { field: 'name', title: '', width: 100, showHeader: true }, {
                showFilter: false, showSort: false,
                showHeader: false,
                field: 'operator', title: "操作", width: 100, slots: {
                    default: (column) => {
                        return h('div', {}, [h(VxeButton, {
                            onClick: () => {
                                console.log('click')
                            }
                        }, ['button'])])
                    }
                }
            }],
        showHeader: true,
        resizable: false,
        showHeaderFilter: false,
    }) as pickKey<tableConfig>

    const pollDown = withDirectives(h(VxePulldown, {
        onClick: (event: MouseEvent) => {
            isClick = true
            setTimeout(() => {
                isClick = false
            }, 0);
            event.stopPropagation()
        },
        onMousedown: (event: MouseEvent) => {
            isMousedown = true
            setTimeout(() => {
                formitem.focus()
                isMousedown = false
            }, 0);
            event.stopPropagation()
        },
        ref: 'polldown'
    }, {
        default: (params: any) => {
            return inputCom
        },
        dropdown: (params: any) => {
            return h(tableView, tableConfig,)
        },
    },), [[{
        mounted: (div, node) => {
            const instance = node.instance
            const $refs = instance?.$refs
            const polldown = $refs?.polldown
            formitem.pageRef['polldown'] = polldown
        }, unmounted: (div, node) => {
            formitem.pageRef['polldown'] = null
        }
    }]])
    return outSizeDivFn([pollDown])




    const vNode = () => {
            const layoutCom = resolveComponent('grid-layout')
            const layoutItemCom = resolveComponent('grid-item')
            const renderLayout = entity.renderLayout

            return h(layoutCom, { ...renderLayout }, () => entity.schema!.map((item: any) => {
                return h(layoutItemCom, item,
                    () => {
                        let renderCom: any = null
                        let defaultCom: any = null
                        const component = item.component
                        if (component != null) {
                            renderCom = withDirectives(component(), [[{
                                mounted(div, node) {
                                },
                                unmounted() { }
                            }]])
                        }
                        if (renderCom) {
                            defaultCom = h('div', { style: { position: "relative", overflow: "hidden", height: '100%', width: "100%" } as StyleType }, [renderCom,
                                dragDiv.value
                            ])
                        } else {
                            defaultCom = h('div', { style: { position: "relative", background: 'red', height: '100%', width: '100%' } as StyleType }, ['默认节点'])
                        }
                        return defaultCom
                    }
                )
            }))
        }


        const _div = h('div', { style: { position: "absolute", top: '0px', left: '0px', bottom: '0px', background: "white", opacity: '0', right: '0px' } as StyleType })

















import { computed, getCurrentInstance, h, isReactive, nextTick, onMounted, reactive, ref, resolveComponent, vShow, watch, watchEffect, withDirectives } from "vue";
import { table } from "./table";
import { StyleType, filterConfig, position, tableSchema } from "@/types/schema";
import { column, createColumn } from "./column";
import { VxeGridProps, VxeGrid, VxeColumnProps, VxeColumnSlotTypes } from "vxe-table";
import { getRenderFn } from "./columnFn";
import { getDialogPosition } from "./dialogFn";
import { getMouseEventPosition } from "@/utils/utils";
import { createDialog } from "./dialog";
import { createContextMenu } from "./businessTable/contextMenu";
import contextMenuView from "./schemaComponent/contextMenuView";
import { createTable } from "./table"
import { createFormItem } from "./formitem";
import defaultHeaderCom from "./tableColumnCom/defaultHeaderCom";
import showValueCom from "./tableColumnCom/showValueCom";
import inputView from "./schemaComponent/inputView";

export const getTableRowConfig = (table: table) => {
    const tableConfig = table?.tableConfig
    const rowConfig = tableConfig?.rowConfig
    // const rowConfig = {
    //     rowHeight: 30,
    //     useKey: false
    // }
    return rowConfig
}
export const getTableHeaderConfig = (table: table) => {
    const tableConfig = table.tableConfig
    const headerConfig = tableConfig.headerConfig
    return headerConfig
}

export const getTableRowHeight = (table: table) => {
    return computed(() => {
        const rowConfig = table.tableConfig.rowConfig
        const rowHeight = rowConfig?.rowHeight || 30
        return rowHeight
    })
}

export const getTableHeaderHeight = (table: table) => {
    return computed(() => {
        const headerConfig = getTableHeaderConfig(table)!
        const rowHeight = headerConfig.rowHeight
        return rowHeight
    })
}

export const getTableStyle = (table: table) => {
    return computed(() => {
        const style: StyleType = {}
        const baseStyle = table.getBaseStyle().value
        return { ...style, ...baseStyle }
    })
}

export const getOptionsId = (table: table) => {
    return computed(() => {
        return
    })
}

export const getOptionsData = (table: table) => {
    return computed(() => {
        let showData = table.tableData.data
        const filterConfig = table.tableConfig.filterConfig!
        let arrayFilterConfig = filterConfig.filter(item => item.filterType == 'array')
        const _data = showData.filter((row: any, i, arr) => {
            let state = true
            for (const config of arrayFilterConfig) {
                let field = config.field!
                let filterArr = config.filterData || []
                if (filterArr.length == 0 || state == false) {
                    continue
                }
                let _value: any = row[field]
                //@ts-ignore
                if (!filterArr.includes(_value)) {
                    state = false
                }
            }
            return state
        })
        //使用loadData获取好像更好一些
        // let _data = showData  
        const _data1 = _data.slice(0)
        nextTick(async () => {
            const tableState = table.tableState
            // if (tableState == 'fullEdit' || tableState == 'moreRowEdit' || tableState == 'singleRowEdit') {
            //     _data1.forEach(row => {
            //         let obj = {} as any
            //         table.editWeakMap.set(row, {})
            //         table.tableConfig.columns.forEach(col => {
            //             let field = col.columnConfig?.field
            //             if (obj[field!] != null) {
            //                 return
            //             } else {
            //                 // let renderFormitem = col.renderFormitem
            //                 // obj[field!] = createFormItem(renderFormitem, null)
            //             }
            //         })
            //         console.log(obj)
            //     })
            // }
            // console.l  og(table.editWeakMap, 'testMap')
            const vxeGrid = table.pageRef.vxeGrid
            vxeGrid?.reloadData(_data).then(res => {
                const scrollConfig = table.scrollConfig
                const scrollTop = scrollConfig.scrollTop
                const scrollLeft = scrollConfig.scrollLeft
                vxeGrid.scrollTo(scrollLeft, scrollTop)
            })
        })
        table.tableData.showData = _data1
        return _data1
    })

}

export const getOptionsColumns = (table: table) => {
    return computed(() => {
        const tableConfig = table.tableConfig
        const checkBoxColumn = tableConfig.showCheckBoxColumn == true ? { type: 'checkbox', width: 50, field: 'checkboxField', align: 'center', resizable: false } as VxeColumnProps : null
        const seqColumn = tableConfig.showSeqColumn == true ? { type: "seq", width: 100, align: 'center', resizable: false } as VxeColumnProps : null
        const defaultColumns = [seqColumn, checkBoxColumn].filter(col => col != null)
        const columns = [
            ...defaultColumns,
            ...tableConfig.columns.map((col: any) => col.renderColumn),]
        return columns
    })
}
//leader

//手下
//掌管  
//部门
//大学生
//未成年


export const getOptionsTreeConfig = (table: table) => {
    return computed(() => {
        return null
    })
}


export const getOptionsScrollX = (table: table) => {
    return computed(() => {
        return {
            enabled: true,
            mode: 'default',
            gt: 10,
            oSize: 5,
        }
    })
}
/* 
 scrollY: {
                enabled: true,
                mode: 'default',
                gt: 200
            },
            //横向滚动
            scrollX: {
                enabled: true,
                mode: 'default',
                gt: 50
            },
*/
export const getOptionsScrollY = (table: table) => {
    return computed(() => {
        return {
            enabled: true,
            mode: 'wheel',
            gt: 0,
            oSize: 0,
        }
    })
}

export const getOptionsRowConfig = (table: table) => {
    return computed(() => {
        const rowConfig = table.tableConfig.rowConfig
        const rowHeight = rowConfig?.rowHeight
        return {
            height: rowHeight,
            isHover: true,
            useKey: false
        }
    })
}

export const getOptionsRowClassName = (table: table) => {
    return computed(() => {
        return ({ row }: any) => {
            const arr = ['']
            const tableConfig = table.tableConfig
            const hiddenBorder = tableConfig.hiddenBorder
            const curRow = table.tableData.curRow
            if (curRow === row) {
                arr.push('curRowClass')
            }
            if (hiddenBorder == true) {
                arr.push('')
            }
            return arr
        }
    })
}

export const getOptionsCellClassName = (table: table) => {
    return computed(() => {
        return ({ row, column }: any) => {
            const curRow = table.tableData.curRow
            const curColumn = table.tableData.curColumn
            if (row == curRow && column?.field == curColumn?.columnConfig?.field && column?.field != null) {
                return ['rowSelect', 'cellDefaultClass']
            }
            return ['cellDefaultClass']
        }
    })
}

export const getOptionsFilterConfig = (table: table) => {
    return computed(() => {
        return {
            showIcon: true
        }
    })
}

export const getOptionsCheckboxConfig = (table: table) => {
    return computed(() => {
        const tableConfig = table.tableConfig
        return tableConfig.checkboxConfig
    })
}

export const getOptionsHeight = (table: table) => {
    return computed(() => {
        const tableConfig = table.tableConfig
        let height = tableConfig.height
        if (typeof height == 'number') {
            height = `${height}px`
        }
        return height
    })
}

export const getOptionsShowFooter = (table: table) => {
    return computed(() => {
        const columns = table.tableConfig.columns
        const showFooter = columns.reduce((res: boolean, item) => {
            if (res == true) {
                return res
            }
            const showFooter: any = item.showFooter!
            if (showFooter === true) {
                return true
            }
            return res
        }, false)
        return showFooter
    })
}

export const getOptionsShowHeader = (table: table) => {
    return computed(() => {
        return table.tableConfig.showHeader
    })
}



export const initGridOptions = (table: table) => {
    const gridOptions = table.gridOptions as VxeGridProps
    gridOptions.columns = table.tableConfig.columns
    gridOptions.columns = getOptionsColumns(table) as any
    //@ts-ignore
    gridOptions.renderData = getOptionsData(table) as any
    gridOptions.treeConfig = getOptionsTreeConfig(table) as any
    gridOptions.scrollX = getOptionsScrollX(table) as any
    gridOptions.scrollY = getOptionsScrollY(table) as any
    gridOptions.rowConfig = getOptionsRowConfig(table) as any
    gridOptions.columnConfig = getOptionsColumnConfig(table) as any
    gridOptions.rowClassName = getOptionsRowClassName(table) as any
    gridOptions.cellClassName = getOptionsCellClassName(table) as any
    gridOptions.filterConfig = getOptionsFilterConfig(table) as any
    gridOptions.checkboxConfig = getOptionsCheckboxConfig(table) as any
    gridOptions.showOverflow = 'ellipsis'
    gridOptions.showHeaderOverflow = 'ellipsis'
    gridOptions.height = getOptionsHeight(table) as any
    gridOptions.minHeight = '150px'
    gridOptions.headerAlign = 'center'
    gridOptions.showFooter = getOptionsShowFooter(table) as any
    gridOptions.showHeader = getOptionsShowHeader(table) as any
    gridOptions.headerRowStyle = {
        height: `${table.tableConfig.headerConfig?.rowHeight}px`
    }
    gridOptions.stripe = true
    gridOptions.border = true
    gridOptions.menuConfig = { enabled: true }
}
export const getOptionsColumnConfig = (table: table) => {
    return computed(() => {
        return {
            useKey: false,
            minWidth: 100
        }
    })
}
export const initComponent = (table: table) => {
    const _this = table
    const show = computed(() => {
        return table.displayState == 'show'
    })
    const destroy = computed(() => {
        return table.displayState == 'destroy'
    })
    //别用闭包，搞死人
    const _vNode = () => {
        const options = table.gridOptions
        if (destroy.value == true) {
            return null
        }
        const outSizeDiv = getRenderFn('div',
            {
                class: ['grid-border-none'],
                style: { height: '100%', width: '100%', position: 'relative' } as StyleType
            },
            [[{
                mounted(div) {
                    const effectPool = table.effectPool
                    if (Object.keys(effectPool).length == 0) {
                        initSchema(table)
                    }
                    table.refreshData()
                }, unmounted() {
                    const dialogMap = table.dialogMap
                    Object.values(dialogMap).forEach(value => {
                        table.destroyDialog(value)
                    })
                    const effectPool = table.effectPool
                    Object.entries(effectPool).forEach(([key, effect]: any) => {
                        if (effect) {
                            effect()
                            delete effectPool[key]
                        }
                    })

                }
            }]]
        )
        const xeinstacne = ref(null)
        const vxeGridCom = withDirectives(h(VxeGrid, {
            ...options, ref: xeinstacne,
            onCellClick: ({ row, column }: any) => {
                _this.setCurRow(row)
                _this.setCurColumn(column)
                const tableConfig = _this.tableConfig
                const onCellClick = tableConfig.onCellClick
                if (typeof onCellClick == 'function') {
                    onCellClick({ row, column } as any)
                }
                let tableState = table.tableState
                if (tableState == 'moreRowEdit') {
                    table.tableData.editData = [...new Set([...table.tableData.editData, row])]
                } else {
                    table.tableData.editData.length && (table.tableData.editData = [])
                }
            },
            onScroll: (params: any) => {
                const { scrollTop, scrollWidth, bodyWidth, bodyHeight, scrollLeft } = params
                table.scrollConfig.scrollTop = scrollTop
                table.scrollConfig.scrollWidth = scrollWidth
                table.scrollConfig.bodyHeight = bodyHeight
                table.scrollConfig.bodyWidth = bodyWidth
                table.scrollConfig.scrollLeft = scrollLeft
            },
            onCellMenu: (params: any) => {
                const { row, column, $event } = params
                const _event: MouseEvent = $event
                _event.preventDefault()
                const tableConfig = _this.tableConfig
                table.openBodyMenu($event)
                const onCellMenu = tableConfig.onCellMenu
                if (typeof onCellMenu == 'function') {
                    onCellMenu({ row, column } as any)
                }
            },
            onCheckboxChange: (value) => {
                const checkChange = table.tableConfig.onCheckboxChange as any
                if (typeof checkChange == 'function') {
                    const row = value.row
                    const records = value.records
                    checkChange(row, records)//哪一行改变了
                }
            },
            onCheckboxRangeEnd: (value) => {
                const checkChange = table.tableConfig.onCheckboxChange as any
                if (typeof checkChange == 'function') {
                    const row = value.records
                    checkChange(row, row)
                }
            },
            onCheckboxAll: (value) => {
                const checkChange = table.tableConfig.onCheckboxChange as any
                if (typeof checkChange == 'function') {
                    const row = value.records
                    checkChange(row, row)
                }
            }
        }, {
            /* 
                这里是插槽
            */
            header: (params: any) => {
                return h(defaultHeaderCom, { column: params.column.params })
            },
            showValue: (params: VxeColumnSlotTypes.DefaultSlotParams) => {
                return h(showValueCom, { column: params.column.params, row: params.row })
            },
            select: (params: VxeColumnSlotTypes.DefaultSlotParams) => {
                const column = params.column.params as column
                nextTick(() => {
                    column.createNewFormitem(params.row)
                });
                //@ts-ignore
                let inputInstance = column.rowIndexFormitem?.[params.row['_X_ROW_KEY']]?.pageRef?.inputInstance

                if (inputInstance == null) {
                    return h('div')
                }
                //@ts-ignore  
                return withDirectives(h('div', { style: { height: "100%", width: '100%' } }, [h(inputView, { inputInstance: inputInstance, data: params.row })]), [[
                    {
                        unmounted: () => {
                            column.deleteFormitem(params.row['_X_ROW_KEY'])
                        }
                    }
                ]])
            },
            string: (params: VxeColumnSlotTypes.DefaultSlotParams) => {
                const column = params.column.params as column
                nextTick(() => {
                    column.createNewFormitem(params.row)
                });
                //@ts-ignore
                let inputInstance = column.rowIndexFormitem?.[params.row['_X_ROW_KEY']]?.pageRef?.inputInstance

                if (inputInstance == null) {
                    return h('div')
                }
                //@ts-ignore  
                return withDirectives(h('div', { style: { height: "100%", width: '100%' } }, [h(inputView, { inputInstance: inputInstance, data: params.row })]), [[
                    {
                        unmounted: () => {
                            column.deleteFormitem(params.row['_X_ROW_KEY'])
                        }
                    }
                ]])
            },
            baseInfo: (params: VxeColumnSlotTypes.DefaultSlotParams) => {
                const column = params.column.params as column
                nextTick(() => {
                    column.createNewFormitem(params.row)
                });
                //@ts-ignore
                let inputInstance = column.rowIndexFormitem?.[params.row['_X_ROW_KEY']]?.pageRef?.inputInstance

                if (inputInstance == null) {
                    return h('div')
                }
                //@ts-ignore  
                return withDirectives(h('div', { style: { height: "100%", width: '100%' } }, [h(inputView, { inputInstance: inputInstance, data: params.row })]), [[
                    {
                        unmounted: () => {
                            column.deleteFormitem(params.row['_X_ROW_KEY'])
                        }
                    }
                ]])
            },
            date: (params: VxeColumnSlotTypes.DefaultSlotParams) => {
                const column = params.column.params as column
                return h('div')
            },
            datetime: (params: VxeColumnSlotTypes.DefaultSlotParams) => {
                return h('div', ['datetime'])
            },
            time: (params: VxeColumnSlotTypes.DefaultSlotParams) => {
                const column = params.column.params as column
                nextTick(() => {
                    column.createNewFormitem(params.row)
                });
                //@ts-ignore
                let inputInstance = column.rowIndexFormitem?.[params.row['_X_ROW_KEY']]?.pageRef?.inputInstance

                if (inputInstance == null) {
                    return h('div')
                }
                //@ts-ignore  
                return withDirectives(h('div', { style: { height: "100%", width: '100%' } }, [h(inputView, { inputInstance: inputInstance, data: params.row })]), [[
                    {
                        unmounted: () => {
                            console.log('unMounted')
                            column.deleteFormitem(params.row['_X_ROW_KEY'])
                        }
                    }
                ]])
            },
            number: (params: VxeColumnSlotTypes.DefaultSlotParams) => {
                return h('div', ['number'])
            },
            wangEditor: (params: VxeColumnSlotTypes.DefaultSlotParams) => {
                return h('div', ['wangEditor'])
            }
        }), [[{
            mounted: (el, node) => {
                table.pageRef.vxeGrid = xeinstacne.value as any
                const scrollConfig = table.scrollConfig
                table.scrollToPosition(scrollConfig.scrollLeft, scrollConfig.scrollTop)
            },
            unmounted: () => {
                table.pageRef.vxeGrid = null as any
            },
        }]])
        const _bodyMenu = table.tableConfig.showBodyMenuDialog == true ? h(contextMenuView, { contextMenuInstance: table.pageRef.bodyContext }) : null
        const _headerMenu = table.tableConfig.showHeaderMenuDialog == true ? h(contextMenuView, { contextMenuInstance: table.pageRef.headerContext }) : null
        const inputDiv = h('div', { style: { height: '100px', width: "100px", background: 'red', position: 'absolute', } as StyleType })
        const inSizeGrid = outSizeDiv([vxeGridCom,
            _bodyMenu,
            _headerMenu,
            // inputDiv
        ])
        const _inSizeGrid = withDirectives(inSizeGrid, [[vShow, show.value]])
        return _inSizeGrid
    }
    table.component = _vNode
}

export const initSchema = (table: table) => {
    const schema: tableSchema = table.schema as any
    let showHeaderFilter = schema.showHeaderFilter
    if (showHeaderFilter === false) {
        table.tableConfig.showHeaderFilter = false
    }
    const tableConfig: any = table.tableConfig
    if (schema != null && Object.keys(schema).length > 0) {
        for (const key of Object.keys(schema)) {
            let tableConfig: any = table.tableConfig
            if (key == 'columns') {
                //这种就不需要了呀
                continue
            }
            const _value = schema[key]
            if (_value != null) {
                table.effectPool[`table${key}Effect`] = watchEffect(() => {
                    const tableData = table.tableData
                    const _tableConfig = table.tableConfig as any
                    if (['data',].includes(key)) {
                        tableData.data = schema['data'] as any || []
                        tableData.showData = schema['data'] as any || []
                    } else {
                        _tableConfig[key] = schema[key]
                    }
                })
            }
        }
        tableConfig.columns = schema['columns']?.map(col => {
            if (col instanceof column) {
                return col
            }
            return createColumn(col, table)
        })
    }
}

export const initTableConfig = (table: table) => {
    initSchema(table)
    // 最后才会初始化Component
    initTableMenu(table)
    initGridOptions(table)
    initRenderFilterTable(table)
    initRenderFilterColTable(table)
    initComponent(table)
}

export const initRenderFilterColTable = (table: table) => {
    const renderFilterColTable = table.renderFilterColTable
    if (table?.tableConfig.showHeaderFilter == false) {
        return
    }
    renderFilterColTable.showHeaderFilter = false
    renderFilterColTable.showSeqColumn = false
    renderFilterColTable.showHeaderFilter = false
    renderFilterColTable.showBodyMenuDialog = false
    renderFilterColTable.showHeaderMenuDialog = false
    renderFilterColTable.columns = [{
        //@ts-ignore
        type: 'string',
        field: "operator",
        editType: "select",
        options: [
            { label: "大于", value: ">" },
            { label: "等于", value: '=' },
            { label: "小于", value: "<" },
            { label: "包含", value: "%" }
        ],
        onChange: (value) => {
            console.log(value)
        }
    }]
    const filterColTable = createTable(renderFilterColTable)
    filterColTable.tableState = 'fullEdit'
    table.pageRef.filterColTable = filterColTable
}

export const initRenderFilterTable = (table: table) => {
    if (table?.tableConfig.showHeaderFilter == false) {
        return
    }
    const renderFilterTable = table.renderFilterTable
    renderFilterTable.columns = [{
        field: "value",
        title: "值",
        width: 150
    }]
    renderFilterTable.showSeqColumn = false
    renderFilterTable.showHeaderFilter = false
    renderFilterTable.headerConfig = {
        rowHeight: 25
    }
    renderFilterTable.rowConfig = {
        height: 25,
        isHover: true,
        rowHeight: 25
    }
    renderFilterTable.showBodyMenuDialog = false
    renderFilterTable.showHeaderMenuDialog = false
    //@ts-ignore
    renderFilterTable.onCheckboxChange = (row, record) => {
        const _record = record//is Array
        const curFilterColumn = table.tableData.curFilterColumn
        const field = curFilterColumn?.columnConfig.field
        const _valueArr = _record.map((row: any) => row['value'])
        const filterConfig = table.tableConfig.filterConfig?.find(config => config.field == field)
        filterConfig!.filterData = _valueArr
    }
    const _table = createTable(renderFilterTable)
    table.pageRef.filterTable = _table
}

export const initTableMenu = (table: table) => {
    //只初始化一次
    if (table.pageRef.bodyContext != null || table.pageRef.headerContext != null) {
        return
    }
    const menuConfig = table.menuConfig
    const headerList = menuConfig.headerMenu.list
    const bodyList = menuConfig.bodyMenu.list
    const headerContext = createContextMenu({ list: headerList })
    const bodyContext = createContextMenu({ list: bodyList })
    table.pageRef.headerContext = headerContext
    table.pageRef.bodyContext = bodyContext
}





// let formitem = ref<formitem>(null as any)
        // let _renderItem = column.value.renderFormitem
        // let renderItem = reactive<any>({
        // })
        // for (const key of Object.keys(_renderItem)) {
        //     if (key == 'type') {
        //         continue
        //     }
        //     renderItem[key] = computed(() => {
        //         return _renderItem[key]
        //     }) as any
        // }
        // //
        // renderItem.modelValue = computed(() => {
        //     return row.value[field!]
        // })
        // renderItem.type = computed(() => {
        //     let type = _renderItem.type
        //     let getRowEditType = column.value.columnConfig.getRowEditType
        //     if (typeof getRowEditType == 'function') {
        //         let _type = getRowEditType(props.row, column.value)
        //         if (_type != null) {
        //             type = _type
        //         }
        //     }
        //     return type
        // })
        // formitem.value = createFormItem(renderItem, null)



         if (editState == 'singleRowEdit') {
                    // let _row = row.value
                    // let curRow = column.value.table?.tableData.curRow
                    // if (_row === curRow) {
                    //     editCom = h(inputView, { inputInstance: formitem.value?.pageRef?.inputInstance, data: row.value })
                    // } else {
                    //     editCom = defaultCom//默认的合并
                    // }
                    // if (_row !== curRow) {
                    //     editCom = defaultCom//默认的合并
                    // }
                } else if (editState == 'moreRowEdit') {
                    let _row = row.value
                    let editData = column.value.table?.tableData.editData
                    if (!editData?.includes(_row)) {//not include the com 
                        editCom = getRenderFn('div', { style: { wdith: '100%' } })([showValue.value])
                    }
                } else if (editState == 'fullEdit') {

                } else {
                    editCom = getRenderFn('div', { style: { wdith: '100%' } })([showValue.value])
                }

                // if (Boolean(column.value.columnConfig.editType) == false || formitem.value == null) {
                //     return getRenderFn('div', { style: { wdith: '100%' } })([showValue.value])
                // }

                  const _canEdit = canEdit.value
            const _editDisable = editDisable.value
            const com = computed(() => { 
  // const route = instance?.$route 
  // const name = route?.name! as string
  // const entity = systemInstance.entityVetor[name]
  // if (entity == null) {
  //   return h(RouterView)
  // }
  // return h(entityView, { entityInstance: entity, })
  // return h(entityView, { entityName: route!.name, })
})









// const menu = h(Menu, {
            //     onClick: (item: any) => {
            //         nextTick(() => {
            //             modelValue.value = false
            //         })
            //     },
            //     mode: 'vertical',
            //     items: contextMenuConfig.list,
            // })

            // const polldown = h(Dropdown, {
            //     destroyPopupOnHide: true,
            //     trigger: ['contextmenu',],
            //     "onUpdate:open": (value) => {
            //         modelValue.value = value
            //     },
            //     open: modelValue.value
            // }, {
            //     default: () => {
            //         return h('div', {
            //             style: {
            //                 width: "250px",
            //                 position: "fixed",
            //                 left: `${position.value.left}px`,
            //                 top: `${position.value.top}px`,
            //                 background: 'red'
            //             } as StyleType
            //         }, [])
            //     },
            //     overlay: () => {
            //         return menu
            //     }
            // })


             // const tableConfig = {
        //     showCheckBoxColumn: false,
        //     onCellClick: () => {
        //         console.log('clickFn')
        //     },
        //     height: "300px",
        //     data: [{ id: 10001, name: 'Test1', nickname: 'T1', role: 'Develop', sex: 'Man', age: 28, address: 'Shenzhen' },
        //     { id: 10002, name: 'Test2', nickname: 'T2', role: 'Test', sex: 'Women', age: 22, address: 'Guangzhou' },
        //     { id: 10003, name: 'Test3', nickname: 'T3', role: 'PM', sex: 'Man', age: 32, address: 'Shanghai' },
        //     ], columns: [
        //         { field: 'name', title: '', width: 100, showHeader: true },
        //         {
        //             showFilter: false, showSort: false,
        //             showHeader: false,
        //             field: 'operator', title: "操作", width: 100, slots: {
        //                 default: (column: any) => {
        //                     return h('div', {}, [h(VxeButton, {
        //                         onClick: () => {
        //                         }
        //                     }, () => {
        //                         return h('div', {}, ['选择'])
        //                     })])
        //                 }
        //             }
        //         }
        //     ],
        //     showHeader: true,
        //     resizable: false,
        //     showHeaderFilter: false,
        //     showHeaderSort: false,
        // }
        // const tableRef = createTable(tableConfig)
        // this.pageRef.tableRef = tableRef
        // return this.pageRef.tableRef




         // const _this = this
    // const tableInfo = this.tableInfo
    // const detailTable = tableInfo?.detailTable! || []
    // const detailEntity = await Promise.all(detailTable.map(async (table) => {
    //   const dTable = await createDetailEntity(table.tableName, table)//表名
    //   dTable.mainEntity = this as any
    //   return dTable
    // }))
    // this.detailTable = detailEntity as any//业务逻辑类型的子组件
    // const renderDetailEntity = this.renderDetailEntity
    // renderDetailEntity.entityGroup = computed(() => {
    //   return this.detailTable
    // }) as any
    // renderDetailEntity.type = computed(() => {
    //   return 'card'
    // }) as any
    // renderDetailEntity.tabBarStyle = computed(() => {
    //   const detailTable = _this.detailTable
    //   const obj = {
    //     margin: '0 0 0 0 !important',
    //     height: '30px'
    //   } as StyleType
    //   if (detailTable!?.length <= 1) {
    //     obj.display = 'none'
    //   }
    //   return obj
    // }) as any
    // const dEntityInstance = createDetailEntityGroup(renderDetailEntity)
    // this.pageRef.dEntityInstance = dEntityInstance
    // this.detailEntityConfig.curDetailKey = this.detailTable?.[0]?.tableInfo?.tableName || ''





    export class DialogPool {
    dynamicContainerElem?: HTMLDivElement
    dialogArr: dialog[] = []
    vNode?: dialog = undefined
    currentDialog?: dialog//当前的活动弹框
    VxeDynamics?: App<Element>
    dynamicApp?: App<Element> 
    constructor() { }
    initDialogPool() {
        this.vNode = new dialog('vNode', {}, getSystem())
        this.initVxeDynamics()//初始化app
        this.checkDynamic();//检测挂载
    }
    closeDialog() { }
    getActiveDialog() {
        return computed(() => {
            const dialogArr = [...new Set(this.dialogArr)]
            const dialogRenderArr = dialogArr.map(dia => {
                return dia.renderDialog
            })
            return dialogRenderArr//这个是弹框的东西
        })
    }
    checkDynamic() {
        let dynamicContainerElem = this.dynamicContainerElem//这个是异步的app
        if (!dynamicContainerElem) {
            dynamicContainerElem = (document.createElement("div")) as any;
            dynamicContainerElem!.className = "vxe-dynamics";
            document.body.appendChild(dynamicContainerElem!);
            this.dynamicApp!.mount(dynamicContainerElem!);
        }
    }
    initVxeDynamics() {
        // const VxeDynamics = defineComponent({
        //     setup() {
        //         const modals = dialogPool.getActiveDialog();
        //         return () => {
        //             return h(
        //                 "div",
        //                 {
        //                     class: "vxe-dynamics--modal",
        //                 },
        //                 modals.value.map((item) => {
        //                     return h(VxeModal, item)
        //                 }
        //                 )
        //             );
        //         };
        //     },
        // });
        // this.dynamicApp = shallowRef(createApp(VxeDynamics)) as any
        // nextTick(() => {
        //     this.dynamicApp!.use(VXETable)
        //     this.dynamicApp!.use(register)
        // })
    }
}