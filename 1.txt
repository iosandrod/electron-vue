<template>
  <a-select
    v-model:value="value"
    show-search
    placeholder="Select a person"
    style="width: 200px"
    :options="options"
    :filter-option="filterOption"
    @focus="handleFocus"
    @blur="handleBlur"
    @change="handleChange"
  ></a-select>
</template>
<script lang="ts" setup>
import type { SelectProps } from 'ant-design-vue';
import { ref } from 'vue';
const options = ref<SelectProps['options']>([
  { value: 'jack', label: 'Jack' },
  { value: 'lucy', label: 'Lucy' },
  { value: 'tom', label: 'Tom' },
]);
const handleChange = (value: string) => {
  console.log(`selected ${value}`);
};
const handleBlur = () => {
  console.log('blur');
};
const handleFocus = () => {
  console.log('focus');
};
const filterOption = (input: string, option: any) => {
  return option.value.toLowerCase().indexOf(input.toLowerCase()) >= 0;
};

const value = ref<string | undefined>(undefined);
</script>




const oArr = [
  {
    value: 1,
  },
  {
    value: 2,
  },
  {
    value: 3,
  },
  {
    value: 4,
  },
  {
    value: 5,
  },
  {
    value: 6,
  },
  {
    value: 7,
  },
  {
    value: 8,
  },
  {
    value: 9,
  },
  {
    value: 10,
  },
]
const testArr = ref(oArr)
const _arr = toRaw(testArr.value)
const _arr1 = toRaw(testArr.value)


function testClick(params: any) {
  electron.ipcRenderer.send('message-to-main', _arr1)
}
electron.ipcRenderer.on('main-to-message', (event, value) => {
  console.log(JSON.stringify(_arr1) == JSON.stringify(value))
})

watchEffect(() => {
  console.log(JSON.stringify(formData))
})

const submitEvent = () => {
  VXETable.modal.message({ content: '保存成功', status: 'success' })
}
const resetEvent = () => {
  VXETable.modal.message({ content: '重置事件', status: 'info' })
}



// const _item = formItems.value.reduce((res, item) => {
//   const children = item.children

// }, [])

@submit="submitEvent"
      @reset="resetEvent"















      const outSizeDivFn = getOutSizeDiv(formitem)
    const itemConfig = formitem.itemConfig
    const field = formitem.itemConfig.field!
    const _data = data || {}
    const diretive: Directive = {
        mounted(div, vnode) {
            const instance = vnode.instance
            const $refs = instance?.$refs!
            const vxeinput = $refs['vxeinput'] as VxeInputInstance
            formitem.pageRef['edititem'] = vxeinput
            formitem.editMethod.focus = () => {
                formitem.itemConfig.isFocus = true
                vxeinput.focus()//使其活得焦点
            }
        },
        unmounted() {
            formitem.pageRef['edititem'] = null
        }
    }
    const showValue = computed(() => {
        return 'showValue'
    })
    const value = computed({
        get() {
            const isFocus = itemConfig.isFocus
            if (isFocus == true) {
                return _data[field]
            }
            return showValue.value
        },
        set(value) {
            _data[field] = value
        }
    }) as any
    const suffStyle = styleBuilder.setMousePoint().getStyle()
    let isClick = false
    let isMousedown = false
    const suffixIcon = getIcon({
        style: suffStyle,
        onClick: (event) => {
            isClick = true
            setTimeout(() => {
                isClick = false
            }, 0);
            event.stopPropagation()
        },
        onMousedown: (event: MouseEvent) => {
            isMousedown = true
            setTimeout(() => {
                formitem.focus()
                isMousedown = false
            }, 0);
            event.stopPropagation()
        }
    }, 'vxe-icon-search')()
    // formitem.effectPool['polldownEffect'] = watchEffect(() => {
    //     const polldown = formitem.pageRef['polldown'] as VxePulldownInstance
    //     if (polldown == null) {
    //         return
    //     }
    //     if (formitem.itemConfig.isFocus == true) {
    //         polldown.showPanel()
    //     } else {
    //         polldown.hidePanel()
    //     }
    // })
    // watch(() => formitem.itemConfig.isFocus, (newValue) => {
    //     console.log(newValue)
    // })
    const inputCom = withDirectives(h(VxeInput,
        {
            modelValue: value.value, onChange: ({ value: value1 }: any) => {
                value.value = value1
            },
            placeholder: '',
            onFocus: () => {
                itemConfig.isFocus = true
            },
            ref: 'vxeinput',
            onBlur: () => {
                if (isClick == false && isMousedown == false) {
                    itemConfig.isFocus = false
                }
            }
        }, {
        suffix: () => {
            return suffixIcon
        }
    })
        , [[diretive]])
    const tableConfig = reactive({
        showCheckBoxColumn: false,
        data: [{ id: 10001, name: 'Test1', nickname: 'T1', role: 'Develop', sex: 'Man', age: 28, address: 'Shenzhen' },
        { id: 10002, name: 'Test2', nickname: 'T2', role: 'Test', sex: 'Women', age: 22, address: 'Guangzhou' },
        { id: 10003, name: 'Test3', nickname: 'T3', role: 'PM', sex: 'Man', age: 32, address: 'Shanghai' },
        ], columns: [
            { field: 'name', title: '', width: 100, showHeader: true }, {
                showFilter: false, showSort: false,
                showHeader: false,
                field: 'operator', title: "操作", width: 100, slots: {
                    default: (column) => {
                        return h('div', {}, [h(VxeButton, {
                            onClick: () => {
                                console.log('click')
                            }
                        }, ['button'])])
                    }
                }
            }],
        showHeader: true,
        resizable: false,
        showHeaderFilter: false,
    }) as pickKey<tableConfig>

    const pollDown = withDirectives(h(VxePulldown, {
        onClick: (event: MouseEvent) => {
            isClick = true
            setTimeout(() => {
                isClick = false
            }, 0);
            event.stopPropagation()
        },
        onMousedown: (event: MouseEvent) => {
            isMousedown = true
            setTimeout(() => {
                formitem.focus()
                isMousedown = false
            }, 0);
            event.stopPropagation()
        },
        ref: 'polldown'
    }, {
        default: (params: any) => {
            return inputCom
        },
        dropdown: (params: any) => {
            return h(tableView, tableConfig,)
        },
    },), [[{
        mounted: (div, node) => {
            const instance = node.instance
            const $refs = instance?.$refs
            const polldown = $refs?.polldown
            formitem.pageRef['polldown'] = polldown
        }, unmounted: (div, node) => {
            formitem.pageRef['polldown'] = null
        }
    }]])
    return outSizeDivFn([pollDown])




    const vNode = () => {
            const layoutCom = resolveComponent('grid-layout')
            const layoutItemCom = resolveComponent('grid-item')
            const renderLayout = entity.renderLayout

            return h(layoutCom, { ...renderLayout }, () => entity.schema!.map((item: any) => {
                return h(layoutItemCom, item,
                    () => {
                        let renderCom: any = null
                        let defaultCom: any = null
                        const component = item.component
                        if (component != null) {
                            renderCom = withDirectives(component(), [[{
                                mounted(div, node) {
                                },
                                unmounted() { }
                            }]])
                        }
                        if (renderCom) {
                            defaultCom = h('div', { style: { position: "relative", overflow: "hidden", height: '100%', width: "100%" } as StyleType }, [renderCom,
                                dragDiv.value
                            ])
                        } else {
                            defaultCom = h('div', { style: { position: "relative", background: 'red', height: '100%', width: '100%' } as StyleType }, ['默认节点'])
                        }
                        return defaultCom
                    }
                )
            }))
        }


        const _div = h('div', { style: { position: "absolute", top: '0px', left: '0px', bottom: '0px', background: "white", opacity: '0', right: '0px' } as StyleType })
